#!/bin/sh

# Set the governor to ondemand for all processors
for cpu in /sys/devices/system/cpu/cpufreq/policy*; do
  echo ondemand > ${cpu}/scaling_governor              
done

# Reduce the boost ignore_nice_load to 0
echo 0 > /sys/devices/system/cpu/cpufreq/ondemand/ignore_nice_load

# Reduce the boost io_is_busy to 1
echo 1 > /sys/devices/system/cpu/cpufreq/ondemand/io_is_busy

# Reduce the boost powersave_bias to 0
echo 0 > /sys/devices/system/cpu/cpufreq/ondemand/powersave_bias

# Reduce the boost sampling_down_factor to 10
echo 10 > /sys/devices/system/cpu/cpufreq/ondemand/sampling_down_factor

# Reduce the boost sampling_rate to 40000
echo 40000 > /sys/devices/system/cpu/cpufreq/ondemand/sampling_rate

# Reduce the boost threshold to 95%
echo 95 > /sys/devices/system/cpu/cpufreq/ondemand/up_threshold

for queue in /sys/block/*/queue
do
	# Choose the first governor available
	avail_scheds="$(cat "$queue/scheduler")"
	for sched in cfq noop kyber bfq mq-deadline none
	do
		if [[ "$avail_scheds" == *"$sched"* ]]
		then
			echo "$sched" > "$queue/scheduler"
			break
		fi
	done

	# Do not use I/O as a source of randomness
	# echo 0 > "$queue/add_random"

	# Disable I/O statistics accounting
	echo 0 > "$queue/iostats"

	# Reduce heuristic read-ahead in exchange for I/O latency
	echo 256 > "$queue/read_ahead_kb"

	# Reduce the maximum number of I/O requests in exchange for latency
	echo 512 > "$queue/nr_requests"

	echo 2 > "$queue/rq_affinity"
	
	echo 128 > "$queue/max_sectors_kb"
done
